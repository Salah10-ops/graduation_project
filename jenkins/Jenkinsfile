pipeline {
    agent any

    environment {
        REGISTRY     = "340752816389.dkr.ecr.us-east-1.amazonaws.com"
        IMAGE_NAME   = "python-app"
        ECR_REPO     = "python-app"
        AWS_REGION   = "us-east-1"
        KUBECONFIG   = "/home/jenkins/.kube/config"
        IMAGE_TAG    = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}"
        NAMESPACE    = "${env.BRANCH_NAME}"  // Will be 'test' or 'prod'
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${REGISTRY}/${ECR_REPO}:${IMAGE_TAG}", "app/")
                }
            }
        }

        stage('Login to ECR') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-ecr-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                        aws configure set default.region $AWS_REGION
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REGISTRY
                    '''
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                sh '''
                    docker push ${REGISTRY}/${ECR_REPO}:${IMAGE_TAG}
                    docker tag ${REGISTRY}/${ECR_REPO}:${IMAGE_TAG} ${REGISTRY}/${ECR_REPO}:latest
                    docker push ${REGISTRY}/${ECR_REPO}:latest
                '''
            }
        }

        stage('Apply Namespaces') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-ecr-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                        kubectl --kubeconfig=$KUBECONFIG apply -f k8s/namespace.yaml
                    '''
                }
            }
        }

        stage('Check Branch') {
            steps {
                echo "üîç Current branch: ${env.BRANCH_NAME}"
            }
        }

        stage('Debug Branch') {
            steps {
                echo "üß† Jenkins sees BRANCH_NAME as: ${env.BRANCH_NAME}"
            }
        }

        stage('Deploy to Test') {
            //when {
            //    expression { env.BRANCH_NAME == 'test' }
            //}
            steps {
                echo "üöÄ Deploying to Test Environment"
                sh '''
                    kubectl --kubeconfig=$KUBECONFIG apply -f k8s/test/redis-deployment.yaml
                    kubectl --kubeconfig=$KUBECONFIG apply -f k8s/test/redis-service.yaml
                    kubectl --kubeconfig=$KUBECONFIG apply -f k8s/test/app-deployment.yaml
                    kubectl --kubeconfig=$KUBECONFIG apply -f k8s/test/app-service.yaml
                    kubectl --kubeconfig=$KUBECONFIG apply -f k8s/test/app-ingress.yaml
                '''
            }
        }

        //stage('Deploy to Prod') {
        //    //when {
        //    //    expression { env.BRANCH_NAME in ['prod', 'main', 'master'] }
        //    //}
        //    steps {
        //        echo "üöÄ Deploying to Production Environment"
        //        sh '''
        //            kubectl --kubeconfig=$KUBECONFIG apply -f k8s/prod/redis-deployment.yaml
        //            kubectl --kubeconfig=$KUBECONFIG apply -f k8s/prod/redis-service.yaml
        //            kubectl --kubeconfig=$KUBECONFIG apply -f k8s/prod/app-deployment.yaml
        //            kubectl --kubeconfig=$KUBECONFIG apply -f k8s/prod/app-service.yaml
        //            kubectl --kubeconfig=$KUBECONFIG apply -f k8s/prod/app-ingress.yaml
        //        '''
        //    }
        //}
    }

    post {
        success {
            echo '‚úÖ Deployment Successful!'
        }
        failure {
            echo '‚ùå Deployment Failed.'
        }
    }
}
